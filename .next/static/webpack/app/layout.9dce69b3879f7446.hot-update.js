"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./services/storageService.ts":
/*!************************************!*\
  !*** ./services/storageService.ts ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addApplication: function() { return /* binding */ addApplication; },\n/* harmony export */   addEvaluationNoteToApplication: function() { return /* binding */ addEvaluationNoteToApplication; },\n/* harmony export */   addMeeting: function() { return /* binding */ addMeeting; },\n/* harmony export */   addNotification: function() { return /* binding */ addNotification; },\n/* harmony export */   addUser: function() { return /* binding */ addUser; },\n/* harmony export */   clearAllData: function() { return /* binding */ clearAllData; },\n/* harmony export */   deleteApplication: function() { return /* binding */ deleteApplication; },\n/* harmony export */   getApplicationByStudent: function() { return /* binding */ getApplicationByStudent; },\n/* harmony export */   getApplicationByStudentId: function() { return /* binding */ getApplicationByStudentId; },\n/* harmony export */   getApplications: function() { return /* binding */ getApplications; },\n/* harmony export */   getMeetings: function() { return /* binding */ getMeetings; },\n/* harmony export */   getMeetingsByApplication: function() { return /* binding */ getMeetingsByApplication; },\n/* harmony export */   getMeetingsByStudent: function() { return /* binding */ getMeetingsByStudent; },\n/* harmony export */   getNotifications: function() { return /* binding */ getNotifications; },\n/* harmony export */   getNotificationsByStudent: function() { return /* binding */ getNotificationsByStudent; },\n/* harmony export */   getUnreadNotificationsByStudent: function() { return /* binding */ getUnreadNotificationsByStudent; },\n/* harmony export */   getUserByEmail: function() { return /* binding */ getUserByEmail; },\n/* harmony export */   getUserById: function() { return /* binding */ getUserById; },\n/* harmony export */   getUsers: function() { return /* binding */ getUsers; },\n/* harmony export */   markAllNotificationsAsRead: function() { return /* binding */ markAllNotificationsAsRead; },\n/* harmony export */   markNotificationAsRead: function() { return /* binding */ markNotificationAsRead; },\n/* harmony export */   migrateApplicationStudentIds: function() { return /* binding */ migrateApplicationStudentIds; },\n/* harmony export */   updateApplicationStatus: function() { return /* binding */ updateApplicationStatus; },\n/* harmony export */   updateMeetingStatus: function() { return /* binding */ updateMeetingStatus; }\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/types */ \"(app-pages-browser)/./types.ts\");\n\nconst USERS_KEY = \"fff_users\";\nconst APPLICATIONS_KEY = \"fff_applications\";\nconst MEETINGS_KEY = \"fff_meetings\";\nconst NOTIFICATIONS_KEY = \"fff_notifications\";\n// Check if we're in the browser\nconst isBrowser = \"object\" !== \"undefined\";\n// User Functions\nconst getUsers = ()=>{\n    if (!isBrowser) return [];\n    const users = localStorage.getItem(USERS_KEY);\n    return users ? JSON.parse(users) : [];\n};\nconst getUserByEmail = (email)=>{\n    return getUsers().find((user)=>user.email === email);\n};\nconst getUserById = (id)=>{\n    return getUsers().find((user)=>user.id === id);\n};\nconst addUser = (user)=>{\n    if (!isBrowser) throw new Error(\"Cannot add user on server side\");\n    const users = getUsers();\n    const newUser = {\n        ...user,\n        id: \"user_\".concat(Date.now())\n    };\n    users.push(newUser);\n    localStorage.setItem(USERS_KEY, JSON.stringify(users));\n    return newUser;\n};\n// Application Functions\nconst getApplications = ()=>{\n    if (!isBrowser) return [];\n    const applications = localStorage.getItem(APPLICATIONS_KEY);\n    console.log(\"getApplications - Raw localStorage data:\", applications);\n    const parsed = applications ? JSON.parse(applications) : [];\n    console.log(\"getApplications - Parsed applications:\", parsed);\n    return parsed;\n};\nconst getApplicationByStudentId = (studentId)=>{\n    return getApplications().find((app)=>app.studentId === studentId);\n};\n// Enhanced function to find application by student ID or name (for backward compatibility)\nconst getApplicationByStudent = (studentId, studentName)=>{\n    if (!isBrowser) return undefined;\n    try {\n        const applications = getApplications();\n        console.log(\"getApplicationByStudent - All applications:\", applications);\n        console.log(\"getApplicationByStudent - Looking for studentId:\", studentId, \"studentName:\", studentName);\n        // First try to find by exact student ID\n        let app = applications.find((app)=>app.studentId === studentId);\n        console.log(\"getApplicationByStudent - Found by ID:\", app);\n        // If not found, try to find by student name (for existing applications with different IDs)\n        if (!app) {\n            app = applications.find((app)=>app.studentName === studentName);\n            console.log(\"getApplicationByStudent - Found by name:\", app);\n            // If found by name, update the studentId to match current user\n            if (app) {\n                console.log(\"getApplicationByStudent - Updating studentId from\", app.studentId, \"to\", studentId);\n                app.studentId = studentId;\n                // Save the updated application back to localStorage\n                localStorage.setItem(APPLICATIONS_KEY, JSON.stringify(applications));\n            }\n        }\n        console.log(\"getApplicationByStudent - Final result:\", app);\n        return app;\n    } catch (error) {\n        console.error(\"Error in getApplicationByStudent:\", error);\n        return undefined;\n    }\n};\nconst addApplication = (application)=>{\n    if (!isBrowser) throw new Error(\"Cannot add application on server side\");\n    const applications = getApplications();\n    const newApplication = {\n        ...application,\n        id: \"app_\".concat(Date.now()),\n        status: _types__WEBPACK_IMPORTED_MODULE_0__.ApplicationStatus.SUBMITTED,\n        submissionDate: new Date().toISOString()\n    };\n    applications.push(newApplication);\n    localStorage.setItem(APPLICATIONS_KEY, JSON.stringify(applications));\n    return newApplication;\n};\nconst updateApplicationStatus = (applicationId, status)=>{\n    if (!isBrowser) return undefined;\n    const applications = getApplications();\n    const appIndex = applications.findIndex((app)=>app.id === applicationId);\n    if (appIndex !== -1) {\n        applications[appIndex].status = status;\n        localStorage.setItem(APPLICATIONS_KEY, JSON.stringify(applications));\n        return applications[appIndex];\n    }\n    return undefined;\n};\nconst addEvaluationNoteToApplication = (applicationId, note)=>{\n    if (!isBrowser) return undefined;\n    const applications = getApplications();\n    const appIndex = applications.findIndex((app)=>app.id === applicationId);\n    if (appIndex !== -1) {\n        var _applications_appIndex_notes;\n        // FIX: Explicitly type `newNote` to ensure it matches the EvaluationNote interface.\n        const newNote = {\n            ...note,\n            id: \"note_\".concat(Date.now()),\n            timestamp: new Date().toISOString()\n        };\n        if (!applications[appIndex].notes) {\n            applications[appIndex].notes = [];\n        }\n        (_applications_appIndex_notes = applications[appIndex].notes) === null || _applications_appIndex_notes === void 0 ? void 0 : _applications_appIndex_notes.push(newNote);\n        localStorage.setItem(APPLICATIONS_KEY, JSON.stringify(applications));\n        return applications[appIndex];\n    }\n    return undefined;\n};\nconst deleteApplication = (applicationId)=>{\n    if (!isBrowser) return false;\n    const applications = getApplications();\n    const filteredApplications = applications.filter((app)=>app.id !== applicationId);\n    if (filteredApplications.length < applications.length) {\n        localStorage.setItem(APPLICATIONS_KEY, JSON.stringify(filteredApplications));\n        return true;\n    }\n    return false;\n};\nconst clearAllData = ()=>{\n    if (!isBrowser) return;\n    localStorage.removeItem(USERS_KEY);\n    localStorage.removeItem(APPLICATIONS_KEY);\n    localStorage.removeItem(MEETINGS_KEY);\n    localStorage.removeItem(NOTIFICATIONS_KEY);\n    // Re-seed the basic users\n    seedAdmin();\n    seedStudent();\n};\n// Meeting Functions\nconst getMeetings = ()=>{\n    if (!isBrowser) return [];\n    const meetings = localStorage.getItem(MEETINGS_KEY);\n    return meetings ? JSON.parse(meetings) : [];\n};\nconst getMeetingsByApplication = (applicationId)=>{\n    return getMeetings().filter((meeting)=>meeting.applicationId === applicationId);\n};\nconst getMeetingsByStudent = (studentId)=>{\n    return getMeetings().filter((meeting)=>meeting.studentId === studentId);\n};\nconst addMeeting = (meeting)=>{\n    if (!isBrowser) throw new Error(\"Cannot add meeting on server side\");\n    const meetings = getMeetings();\n    const newMeeting = {\n        ...meeting,\n        id: \"meeting_\".concat(Date.now()),\n        createdAt: new Date().toISOString()\n    };\n    meetings.push(newMeeting);\n    localStorage.setItem(MEETINGS_KEY, JSON.stringify(meetings));\n    return newMeeting;\n};\nconst updateMeetingStatus = (meetingId, status)=>{\n    if (!isBrowser) return undefined;\n    const meetings = getMeetings();\n    const meetingIndex = meetings.findIndex((meeting)=>meeting.id === meetingId);\n    if (meetingIndex !== -1) {\n        meetings[meetingIndex].status = status;\n        localStorage.setItem(MEETINGS_KEY, JSON.stringify(meetings));\n        return meetings[meetingIndex];\n    }\n    return undefined;\n};\n// Notification Functions\nconst getNotifications = ()=>{\n    if (!isBrowser) return [];\n    const notifications = localStorage.getItem(NOTIFICATIONS_KEY);\n    return notifications ? JSON.parse(notifications) : [];\n};\nconst getNotificationsByStudent = (studentId)=>{\n    return getNotifications().filter((notification)=>notification.studentId === studentId);\n};\nconst getUnreadNotificationsByStudent = (studentId)=>{\n    return getNotificationsByStudent(studentId).filter((notification)=>!notification.isRead);\n};\nconst addNotification = (notification)=>{\n    if (!isBrowser) throw new Error(\"Cannot add notification on server side\");\n    const notifications = getNotifications();\n    const newNotification = {\n        ...notification,\n        id: \"notification_\".concat(Date.now()),\n        createdAt: new Date().toISOString()\n    };\n    notifications.push(newNotification);\n    localStorage.setItem(NOTIFICATIONS_KEY, JSON.stringify(notifications));\n    return newNotification;\n};\nconst markNotificationAsRead = (notificationId)=>{\n    if (!isBrowser) return undefined;\n    const notifications = getNotifications();\n    const notificationIndex = notifications.findIndex((notification)=>notification.id === notificationId);\n    if (notificationIndex !== -1) {\n        notifications[notificationIndex].isRead = true;\n        localStorage.setItem(NOTIFICATIONS_KEY, JSON.stringify(notifications));\n        return notifications[notificationIndex];\n    }\n    return undefined;\n};\nconst markAllNotificationsAsRead = (studentId)=>{\n    if (!isBrowser) return;\n    const notifications = getNotifications();\n    notifications.forEach((notification)=>{\n        if (notification.studentId === studentId && !notification.isRead) {\n            notification.isRead = true;\n        }\n    });\n    localStorage.setItem(NOTIFICATIONS_KEY, JSON.stringify(notifications));\n};\n// Migration function to fix existing applications with mismatched student IDs\nconst migrateApplicationStudentIds = ()=>{\n    if (!isBrowser) return;\n    try {\n        const applications = getApplications();\n        const users = getUsers();\n        let updated = false;\n        applications.forEach((app)=>{\n            // Check if the studentId in the application matches any existing user\n            const userExists = users.find((user)=>user.id === app.studentId);\n            if (!userExists) {\n                // Try to find user by name\n                const userByName = users.find((user)=>user.fullName === app.studentName);\n                if (userByName) {\n                    app.studentId = userByName.id;\n                    updated = true;\n                }\n            }\n        });\n        if (updated) {\n            localStorage.setItem(APPLICATIONS_KEY, JSON.stringify(applications));\n        }\n    } catch (error) {\n        console.error(\"Error in migration:\", error);\n    }\n};\n// Seeding functions (defined after main functions to avoid circular dependency)\nconst seedAdmin = ()=>{\n    if (!isBrowser) return;\n    const users = getUsers();\n    if (!users.some((u)=>u.role === _types__WEBPACK_IMPORTED_MODULE_0__.UserRole.ADMIN)) {\n        const admin = {\n            id: \"admin_01\",\n            email: \"admin@test.com\",\n            password: \"admin123\",\n            role: _types__WEBPACK_IMPORTED_MODULE_0__.UserRole.ADMIN,\n            fullName: \"HP Admin\"\n        };\n        users.push(admin);\n        localStorage.setItem(USERS_KEY, JSON.stringify(users));\n    }\n};\nconst seedStudent = ()=>{\n    if (!isBrowser) return;\n    const users = getUsers();\n    if (!users.some((u)=>u.email === \"student@test.com\")) {\n        const student = {\n            id: \"student_01\",\n            email: \"student@test.com\",\n            password: \"student123\",\n            role: _types__WEBPACK_IMPORTED_MODULE_0__.UserRole.STUDENT,\n            fullName: \"Test Student\",\n            college: \"Test University\"\n        };\n        users.push(student);\n        localStorage.setItem(USERS_KEY, JSON.stringify(users));\n    }\n};\n// Initialize with admin and student (only in browser)\nif (isBrowser) {\n    try {\n        if (!localStorage.getItem(USERS_KEY)) {\n            localStorage.setItem(USERS_KEY, JSON.stringify([]));\n            seedAdmin();\n            seedStudent();\n        } else {\n            // Ensure both users exist even if localStorage already has data\n            seedAdmin();\n            seedStudent();\n        // Run migration to fix any existing application student ID mismatches\n        // Temporarily disabled to fix loading issue\n        // try {\n        //     migrateApplicationStudentIds();\n        // } catch (error) {\n        //     console.error('Migration failed:', error);\n        // }\n        }\n    } catch (error) {\n        console.error(\"Storage service initialization failed:\", error);\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./services/storageService.ts\n"));

/***/ })

});